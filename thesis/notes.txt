wspomnieć o DSL (domain specific language)

===================

w Generacji wspomnieć o CodeDom

===================

Choosing a Template Engine for code generation

http://pjmolina.com/metalevel/2009/06/choosing-a-template-engine-for-code-generation/

===================

Dlaczego użytkownik musi definiować schemat jsona poddawanego generacji? (projekt Schema) alternatywa: podejście no-schema

no-schema sql: http://www.cs.uiuc.edu/class/fa06/cs511/nssql.pdf

===================

Problem: gdzie w CQRS zdefiniowana jest dziedzina (encje) aplikacji? Model do odczytywania nie zawiera przecież encji.
Rozwiązanie: niech będzie w JSONie.

===================

Problem: model "read" i model "write" częściowo na siebie zachodzą (lub nawet "read" zawiera "write"). Jak uniknąć duplikacji metadanych?
Rozwiązanie: niech będzie jeden model w JSONie.

===================

Ogólnie nie chodzi o to, żeby w ogóle nie pisać nazw klas / właściwości - tylko o to, żeby nie trzeba było pamiętać o wszystkich miejscach, gdzie dana encja jest używana.
Rozwiązanie: wystarczy, że po usunięciu czegoś z JSONa wywali się kompilacja. No i w JSONie można zapisać miejsca, w których encja jest używana (jeśli trzeba będize coś do niej dodać).

===================

Wybrór klienta Cassandry
- żaden z nich nie wspiera generownia klas na podstawie schematu (lub odwrotnie, więc tym bardziej warto używać generatora kodu i schematu)
^ UPDATE: datastax chyba wspiera :(
